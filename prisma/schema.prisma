generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  password      String?   // Almacena la contraseña hasheada para login con email/password
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  metadata      Json?     // Campo para almacenar metadatos adicionales como tokens de Google Drive
  sessions      Session[]
  accounts      Account[] // Relación con cuentas OAuth
  conversations Conversation[]
  userRoles     UserRole[]
  driveTokens   DriveToken?
  @@map("users")
}

// Modelo para almacenar tokens de Google Drive
model DriveToken {
  id            String   @id @default(cuid())
  userId        String   @unique
  accessToken   String   @db.Text
  refreshToken  String?  @db.Text
  expiryDate    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("drive_tokens")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  settings  Json?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  role           MessageRole
  conversationId String
  parentId       String?
  sources        Json?
  usage          Json?
  metadata       Json?
  createdAt      DateTime @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent         Message?     @relation("MessageThread", fields: [parentId], references: [id])
  children       Message[]    @relation("MessageThread")
  @@index([conversationId, createdAt])
  @@map("messages")
}

enum MessageRole { 
  USER 
  ASSISTANT 
  SYSTEM 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  role      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@map("user_roles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // oauth, email, etc.
  provider          String  // google, github, etc.
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
